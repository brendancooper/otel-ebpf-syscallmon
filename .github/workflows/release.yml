name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Install build dependencies
        run: |
          set -euo pipefail
          # Speed up apt installs: disable man-db auto updates and use eatmydata + dpkg opts
          sudo rm -f /var/lib/man-db/auto-update || true
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive \
               apt-get install -y --no-install-recommends \
               -o Dpkg::Use-Pty=0 \
               -o DPkg::Options::="--force-confdef" \
               -o DPkg::Options::="--force-confold" \
               eatmydata

          sudo DEBIAN_FRONTEND=noninteractive \
               eatmydata apt-get install -y --no-install-recommends \
               -o Dpkg::Use-Pty=0 \
               -o DPkg::Options::="--force-confdef" \
               -o DPkg::Options::="--force-confold" \
               build-essential \
               clang \
               libbpf-dev \
               libcap-dev \
               libelf-dev \
               llvm \
               make \
               pkg-config \
               zlib1g-dev \
               linux-tools-common

          KERNEL_RELEASE="$(uname -r)"
          if ! sudo DEBIAN_FRONTEND=noninteractive \
                  eatmydata apt-get install -y --no-install-recommends \
                  -o Dpkg::Use-Pty=0 \
                  -o DPkg::Options::="--force-confdef" \
                  -o DPkg::Options::="--force-confold" \
                  "linux-tools-${KERNEL_RELEASE}"; then
            sudo DEBIAN_FRONTEND=noninteractive \
                 eatmydata apt-get install -y --no-install-recommends \
                 -o Dpkg::Use-Pty=0 \
                 -o DPkg::Options::="--force-confdef" \
                 -o DPkg::Options::="--force-confold" \
                 linux-tools-generic linux-cloud-tools-generic || true
          fi

          BPFT_TOOL="$(find /usr/lib -maxdepth 2 -path '*/linux-tools-*' -name bpftool -print | head -n1)"
          if [ -n "${BPFT_TOOL}" ]; then
            sudo ln -sf "${BPFT_TOOL}" /usr/local/bin/bpftool
          fi

          bpftool version

      - name: Compute build metadata
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF##*/}"
          SHA="${GITHUB_SHA}"
          TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          BUILD_ID="${TAG}-${GITHUB_RUN_NUMBER}-${SHA:0:7}"
          echo "TAG=${TAG}" >> "$GITHUB_OUTPUT"
          echo "SHA=${SHA}" >> "$GITHUB_OUTPUT"
          echo "TIME=${TIME}" >> "$GITHUB_OUTPUT"
          echo "BUILD_ID=${BUILD_ID}" >> "$GITHUB_OUTPUT"
          # ldflags for go build
          echo "LDFLAGS=-X 'main.Version=${TAG}' -X 'main.BuildID=${BUILD_ID}' -X 'main.Commit=${SHA}' -X 'main.BuildTime=${TIME}'" >> "$GITHUB_OUTPUT"

      - name: Build binaries with Makefile
        env:
          LDFLAGS: ${{ steps.meta.outputs.LDFLAGS }}
        run: |
          make clean
          make all

      - name: Capture build info from binary
        id: buildinfo
        shell: bash
        run: |
          set -euo pipefail
          INFO=$(./syscall_monitor -version)
          echo "$INFO" | tee buildinfo.txt
          # Expose as output and env-compatible
          echo "BUILD_INFO=$INFO" >> "$GITHUB_OUTPUT"

      - name: Generate release notes
        id: release_notes
        uses: actions/github-script@v7
        env:
          BUILD_INFO: ${{ steps.buildinfo.outputs.BUILD_INFO }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const tagName = context.ref.replace('refs/tags/', '');
            const response = await github.rest.repos.generateReleaseNotes({
              owner,
              repo,
              tag_name: tagName,
              target_commitish: context.sha
            });

            let body = response.data.body || '';
            const previousTag = response.data.previous_tag_name;

            if (previousTag) {
              const compare = await github.rest.repos.compareCommitsWithBasehead({
                owner,
                repo,
                basehead: `${previousTag}...${tagName}`
              });

              if (compare.data.commits?.length) {
                body += `\n\n## Changes`; 
                for (const commit of compare.data.commits) {
                  const subject = commit.commit.message.split('\n')[0];
                  const sha = commit.sha.substring(0, 7);
                  body += `\n- ${subject} (${sha})`;
                }
              }
            }

            const buildInfo = process.env.BUILD_INFO || '';
            if (buildInfo) {
              body += `\n\n## Build Info\n${buildInfo}`;
            }

            if (!body.trim()) {
              body = `Release ${tagName}`;
            }

            return { body };

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: syscall-monitor-build
          path: |
            syscall_monitor
            syscall_monitoring.bpf.o

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.release_notes.outputs.body }}
          files: |
            syscall_monitor
            syscall_monitoring.bpf.o
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

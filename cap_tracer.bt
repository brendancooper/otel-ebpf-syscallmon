#!/usr/bin/env bpftrace

kprobe:cap_capable
/comm == "user_monitor"/
{
    // Initialize maps once
    if (!@init) {
        // Human-readable capability names
        @cap_names[0]  = "CAP_CHOWN";
        @cap_names[1]  = "CAP_DAC_OVERRIDE";
        @cap_names[2]  = "CAP_DAC_READ_SEARCH";
        @cap_names[3]  = "CAP_FOWNER";
        @cap_names[4]  = "CAP_FSETID";
        @cap_names[5]  = "CAP_KILL";
        @cap_names[6]  = "CAP_SETGID";
        @cap_names[7]  = "CAP_SETUID";
        @cap_names[8]  = "CAP_SETPCAP";
        @cap_names[9]  = "CAP_LINUX_IMMUTABLE";
        @cap_names[10] = "CAP_NET_BIND_SERVICE";
        @cap_names[11] = "CAP_NET_BROADCAST";
        @cap_names[12] = "CAP_NET_ADMIN";
        @cap_names[13] = "CAP_NET_RAW";
        @cap_names[14] = "CAP_IPC_LOCK";
        @cap_names[15] = "CAP_IPC_OWNER";
        @cap_names[16] = "CAP_SYS_MODULE";
        @cap_names[17] = "CAP_SYS_RAWIO";
        @cap_names[18] = "CAP_SYS_CHROOT";
        @cap_names[19] = "CAP_SYS_PTRACE";
        @cap_names[20] = "CAP_SYS_PACCT";
        @cap_names[21] = "CAP_SYS_ADMIN";
        @cap_names[22] = "CAP_SYS_BOOT";
        @cap_names[23] = "CAP_SYS_NICE";
        @cap_names[24] = "CAP_SYS_RESOURCE";
        @cap_names[25] = "CAP_SYS_TIME";
        @cap_names[26] = "CAP_SYS_TTY_CONFIG";
        @cap_names[27] = "CAP_MKNOD";
        @cap_names[28] = "CAP_LEASE";
        @cap_names[29] = "CAP_AUDIT_WRITE";
        @cap_names[30] = "CAP_AUDIT_CONTROL";
        @cap_names[31] = "CAP_SETFCAP";
        @cap_names[32] = "CAP_MAC_OVERRIDE";
        @cap_names[33] = "CAP_MAC_ADMIN";
        @cap_names[34] = "CAP_SYSLOG";
        @cap_names[35] = "CAP_WAKE_ALARM";
        @cap_names[36] = "CAP_BLOCK_SUSPEND";
        @cap_names[37] = "CAP_AUDIT_READ";

        // Numeric existence map
        @cap_exists[0]  = 1;
        @cap_exists[1]  = 1;
        @cap_exists[2]  = 1;
        @cap_exists[3]  = 1;
        @cap_exists[4]  = 1;
        @cap_exists[5]  = 1;
        @cap_exists[6]  = 1;
        @cap_exists[7]  = 1;
        @cap_exists[8]  = 1;
        @cap_exists[9]  = 1;
        @cap_exists[10] = 1;
        @cap_exists[11] = 1;
        @cap_exists[12] = 1;
        @cap_exists[13] = 1;
        @cap_exists[14] = 1;
        @cap_exists[15] = 1;
        @cap_exists[16] = 1;
        @cap_exists[17] = 1;
        @cap_exists[18] = 1;
        @cap_exists[19] = 1;
        @cap_exists[20] = 1;
        @cap_exists[21] = 1;
        @cap_exists[22] = 1;
        @cap_exists[23] = 1;
        @cap_exists[24] = 1;
        @cap_exists[25] = 1;
        @cap_exists[26] = 1;
        @cap_exists[27] = 1;
        @cap_exists[28] = 1;
        @cap_exists[29] = 1;
        @cap_exists[30] = 1;
        @cap_exists[31] = 1;
        @cap_exists[32] = 1;
        @cap_exists[33] = 1;
        @cap_exists[34] = 1;
        @cap_exists[35] = 1;
        @cap_exists[36] = 1;
        @cap_exists[37] = 1;

        @init = 1; // mark maps as initialized
    }

    $cap = arg1 & 0xFFFFFFFF;

    if (@cap_exists[$cap]) {
        printf("%s (pid %d) requested capability %s (%d)\n", comm, pid, @cap_names[$cap], $cap);
    } else {
        printf("%s (pid %d) requested capability UNKNOWN (%d)\n", comm, pid, $cap);
    }
}

